import random
import string
from datetime import datetime, timedelta

from key_management import KeyManager


def admin_key_management():
    """Ch∆∞∆°ng tr√¨nh qu·∫£n l√Ω key cho admin"""
    print("üîß TikTok Downloader - Key Management System")
    print("=" * 50)

    # K·∫øt n·ªëi MongoDB
    key_manager = KeyManager(
        "mongodb+srv://loozzi_myapp:pI5NCGIey19ga1nK@cluster0.hqs96.mongodb.net/?retryWrites=true&w=majority"
    )

    while True:
        print("\nüìã MENU QU·∫¢N L√ù KEY:")
        print("1. T·∫°o key m·ªõi")
        print("2. Xem danh s√°ch key")
        print("3. X√≥a key")
        print("4. C·∫≠p nh·∫≠t th·ªùi h·∫°n key")
        print("5. Th·ªëng k√™ key")
        print("6. T·∫°o nhi·ªÅu key")
        print("7. X√≥a to√†n b·ªô key")
        print("0. Tho√°t")

        choice = input("\nCh·ªçn ch·ª©c nƒÉng (0-6): ").strip()

        if choice == "1":
            create_new_key(key_manager)
        elif choice == "2":
            list_all_keys(key_manager)
        elif choice == "3":
            delete_key(key_manager)
        elif choice == "4":
            update_key_expiry(key_manager)
        elif choice == "5":
            show_key_statistics(key_manager)
        elif choice == "6":
            create_multiple_keys(key_manager)
        elif choice == "7":
            delete_all_keys(key_manager)
        elif choice == "0":
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")


# X√≥a to√†n b·ªô key
def delete_all_keys(key_manager):
    print("\n‚ö†Ô∏è X√ìA TO√ÄN B·ªò KEY")
    print("-" * 30)
    confirm = input(
        "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô key? (g√µ YES ƒë·ªÉ x√°c nh·∫≠n): "
    ).strip()
    if confirm == "YES":
        result = key_manager.keys_collection.delete_many({})
        print(f"‚úÖ ƒê√£ x√≥a {result.deleted_count} key kh·ªèi h·ªá th·ªëng!")
    else:
        print("‚èπÔ∏è H·ªßy thao t√°c x√≥a to√†n b·ªô key.")


# T·∫°o nhi·ªÅu key s·ªë l∆∞·ª£ng l·ªõn
def create_multiple_keys(key_manager):
    print("\nüÜï T·∫†O NHI·ªÄU KEY S·ªê L∆Ø·ª¢NG L·ªöN")
    print("-" * 30)

    try:
        count = input("Nh·∫≠p s·ªë l∆∞·ª£ng key mu·ªën t·∫°o: ").strip()
        if not count.isdigit() or int(count) <= 0:
            print("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!")
            return
        count = int(count)

        description = input("M√¥ t·∫£ key (t√πy ch·ªçn, √°p d·ª•ng cho t·∫•t c·∫£): ").strip()

        print("\nCh·ªçn th·ªùi h·∫°n key:")
        print("1. 7 ng√†y")
        print("2. 30 ng√†y")
        print("3. 90 ng√†y")
        print("4. 1 nƒÉm")
        print("5. Kh√¥ng gi·ªõi h·∫°n")
        expiry_choice = input("Ch·ªçn (1-5): ").strip()

        valid_days = None
        if expiry_choice == "1":
            valid_days = 7
        elif expiry_choice == "2":
            valid_days = 30
        elif expiry_choice == "3":
            valid_days = 90
        elif expiry_choice == "4":
            valid_days = 365
        # expiry_choice == "5" th√¨ valid_days = None

        key_length = 20
        characters = string.ascii_letters + string.digits
        now_str = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"keys_{now_str}.txt"

        key_docs = []
        key_lines = []
        for _ in range(count):
            new_key = "".join(random.choice(characters) for _ in range(key_length))
            key_doc = {
                "key": new_key,
                "description": description,
                "created_date": datetime.now(),
                "valid_days": valid_days,
                "expired_date": None,  # S·∫Ω set khi k√≠ch ho·∫°t
                "device_id": None,
                "activated_date": None,
            }
            key_docs.append(key_doc)
            key_lines.append(f"Key: {new_key}")

        # L∆∞u v√†o database
        key_manager.keys_collection.insert_many(key_docs)

        # L∆∞u v√†o file
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"M√¥ t·∫£: {description}\n")
            f.write(f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            if valid_days:
                f.write(f"Th·ªùi h·∫°n: {valid_days} ng√†y k·ªÉ t·ª´ khi k√≠ch ho·∫°t\n")
            else:
                f.write("H·∫øt h·∫°n: Kh√¥ng gi·ªõi h·∫°n\n")
            f.write(f"S·ªë l∆∞·ª£ng: {count}\n")
            f.write("-" * 40 + "\n")
            for line in key_lines:
                f.write(line + "\n")

        print(f"\n‚úÖ ƒê√£ t·∫°o {count} key th√†nh c√¥ng!")
        print(f"üíæ Danh s√°ch key ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file {filename}")

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o nhi·ªÅu key: {str(e)}")


def create_new_key(key_manager):
    """T·∫°o key m·ªõi"""
    print("\nüÜï T·∫†O KEY M·ªöI")
    print("-" * 30)

    # T·∫°o key ng·∫´u nhi√™n
    key_length = 20
    characters = string.ascii_letters + string.digits
    new_key = "".join(random.choice(characters) for _ in range(key_length))

    # Nh·∫≠p th√¥ng tin key
    description = input("M√¥ t·∫£ key (t√πy ch·ªçn): ").strip()

    # Nh·∫≠p th·ªùi h·∫°n
    print("\nCh·ªçn th·ªùi h·∫°n key:")
    print("1. 7 ng√†y")
    print("2. 30 ng√†y")
    print("3. 90 ng√†y")
    print("4. 1 nƒÉm")
    print("5. Kh√¥ng gi·ªõi h·∫°n")

    expiry_choice = input("Ch·ªçn (1-5): ").strip()

    valid_days = None
    if expiry_choice == "1":
        valid_days = 7
    elif expiry_choice == "2":
        valid_days = 30
    elif expiry_choice == "3":
        valid_days = 90
    elif expiry_choice == "4":
        valid_days = 365
    # expiry_choice == "5" th√¨ valid_days = None (kh√¥ng gi·ªõi h·∫°n)

    # L∆∞u key v√†o database
    key_doc = {
        "key": new_key,
        "description": description,
        "created_date": datetime.now(),
        "valid_days": valid_days,
        "expired_date": None,  # S·∫Ω set khi k√≠ch ho·∫°t
        "device_id": None,
        "activated_date": None,
    }

    try:
        key_manager.keys_collection.insert_one(key_doc)
        print(f"\n‚úÖ T·∫°o key th√†nh c√¥ng!")
        print(f"üîë Key: {new_key}")
        if valid_days:
            print(f"‚è∞ Th·ªùi h·∫°n: {valid_days} ng√†y k·ªÉ t·ª´ khi k√≠ch ho·∫°t")
        else:
            print("‚è∞ H·∫øt h·∫°n: Kh√¥ng gi·ªõi h·∫°n")

        # L∆∞u key v√†o file v·ªõi encoding utf-8 ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát
        with open(
            f"key_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", "w", encoding="utf-8"
        ) as f:
            f.write(f"Key: {new_key}\n")
            f.write(f"M√¥ t·∫£: {description}\n")
            f.write(f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            if valid_days:
                f.write(f"Th·ªùi h·∫°n: {valid_days} ng√†y k·ªÉ t·ª´ khi k√≠ch ho·∫°t\n")
            else:
                f.write("H·∫øt h·∫°n: Kh√¥ng gi·ªõi h·∫°n\n")

        print(f"üíæ Key ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file")

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o key: {str(e)}")


def list_all_keys(key_manager):
    """Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ key"""
    print("\nüìù DANH S√ÅCH KEY")
    print("-" * 100)

    try:
        keys = list(key_manager.keys_collection.find().sort("created_date", -1))

        if not keys:
            print("Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng")
            return

        print(
            f"{'STT':<3} {'Key':<22} {'Tr·∫°ng th√°i':<12} {'H·∫øt h·∫°n':<20} {'Valid days':<12} {'M√¥ t·∫£':<20}"
        )
        print("-" * 100)

        for i, key_doc in enumerate(keys, 1):
            key = key_doc.get("key", "")
            status = "ƒê√£ k√≠ch ho·∫°t" if key_doc.get("device_id") else "Ch∆∞a k√≠ch ho·∫°t"

            expired_date = key_doc.get("expired_date")
            if expired_date:
                if datetime.now() > expired_date:
                    status = "H·∫øt h·∫°n"
                expiry_str = expired_date.strftime("%d/%m/%Y")
            else:
                expiry_str = "Kh√¥ng gi·ªõi h·∫°n"

            valid_days = key_doc.get("valid_days")
            valid_days_str = str(valid_days) if valid_days else "Kh√¥ng gi·ªõi h·∫°n"

            description = key_doc.get("description", "")[:18]

            print(
                f"{i:<3} {key:<22} {status:<12} {expiry_str:<20} {valid_days_str:<12} {description:<20}"
            )

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch key: {str(e)}")


def delete_key(key_manager):
    """X√≥a key"""
    print("\nüóëÔ∏è X√ìA KEY")
    print("-" * 30)

    key_to_delete = input("Nh·∫≠p key c·∫ßn x√≥a: ").strip()

    if not key_to_delete:
        print("‚ùå Vui l√≤ng nh·∫≠p key")
        return

    try:
        # T√¨m key
        key_doc = key_manager.keys_collection.find_one({"key": key_to_delete})

        if not key_doc:
            print("‚ùå Key kh√¥ng t·ªìn t·∫°i")
            return

        # Hi·ªÉn th·ªã th√¥ng tin key
        print(f"\nTh√¥ng tin key s·∫Ω x√≥a:")
        print(f"Key: {key_doc.get('key')}")
        print(f"M√¥ t·∫£: {key_doc.get('description', 'Kh√¥ng c√≥')}")
        print(
            f"Tr·∫°ng th√°i: {'ƒê√£ k√≠ch ho·∫°t' if key_doc.get('device_id') else 'Ch∆∞a k√≠ch ho·∫°t'}"
        )

        confirm = input("\nB·∫°n c√≥ ch·∫Øc mu·ªën x√≥a key n√†y? (y/N): ").strip().lower()

        if confirm == "y":
            result = key_manager.keys_collection.delete_one({"key": key_to_delete})
            if result.deleted_count > 0:
                print("‚úÖ X√≥a key th√†nh c√¥ng!")
            else:
                print("‚ùå Kh√¥ng th·ªÉ x√≥a key")
        else:
            print("‚èπÔ∏è H·ªßy b·ªè x√≥a key")

    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a key: {str(e)}")


def update_key_expiry(key_manager):
    """C·∫≠p nh·∫≠t th·ªùi h·∫°n key"""
    print("\n‚è∞ C·∫¨P NH·∫¨T TH·ªúI H·∫†N KEY")
    print("-" * 30)

    key_to_update = input("Nh·∫≠p key c·∫ßn c·∫≠p nh·∫≠t: ").strip()

    if not key_to_update:
        print("‚ùå Vui l√≤ng nh·∫≠p key")
        return

    try:
        # T√¨m key
        key_doc = key_manager.keys_collection.find_one({"key": key_to_update})

        if not key_doc:
            print("‚ùå Key kh√¥ng t·ªìn t·∫°i")
            return

        print(f"\nTh√¥ng tin key hi·ªán t·∫°i:")
        print(f"Key: {key_doc.get('key')}")
        current_expiry = key_doc.get("expired_date")
        if current_expiry:
            print(f"H·∫øt h·∫°n hi·ªán t·∫°i: {current_expiry.strftime('%d/%m/%Y %H:%M:%S')}")
        else:
            print("H·∫øt h·∫°n hi·ªán t·∫°i: Kh√¥ng gi·ªõi h·∫°n")

        print("\nCh·ªçn th·ªùi h·∫°n m·ªõi:")
        print("1. 7 ng√†y")
        print("2. 30 ng√†y")
        print("3. 90 ng√†y")
        print("4. 1 nƒÉm")
        print("5. Kh√¥ng gi·ªõi h·∫°n")

        expiry_choice = input("Ch·ªçn (1-5): ").strip()

        new_expiry_date = None
        if expiry_choice == "1":
            new_expiry_date = datetime.now() + timedelta(days=7)
        elif expiry_choice == "2":
            new_expiry_date = datetime.now() + timedelta(days=30)
        elif expiry_choice == "3":
            new_expiry_date = datetime.now() + timedelta(days=90)
        elif expiry_choice == "4":
            new_expiry_date = datetime.now() + timedelta(days=365)

        # C·∫≠p nh·∫≠t
        result = key_manager.keys_collection.update_one(
            {"key": key_to_update}, {"$set": {"expired_date": new_expiry_date}}
        )

        if result.modified_count > 0:
            print("‚úÖ C·∫≠p nh·∫≠t th·ªùi h·∫°n key th√†nh c√¥ng!")
            if new_expiry_date:
                print(
                    f"‚è∞ Th·ªùi h·∫°n m·ªõi: {new_expiry_date.strftime('%d/%m/%Y %H:%M:%S')}"
                )
            else:
                print("‚è∞ Th·ªùi h·∫°n m·ªõi: Kh√¥ng gi·ªõi h·∫°n")
        else:
            print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t key")

    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t key: {str(e)}")


def show_key_statistics(key_manager):
    """Hi·ªÉn th·ªã th·ªëng k√™ key"""
    print("\nüìä TH·ªêNG K√ä KEY")
    print("-" * 30)

    try:
        total_keys = key_manager.keys_collection.count_documents({})
        activated_keys = key_manager.keys_collection.count_documents(
            {"device_id": {"$ne": None}}
        )
        expired_keys = key_manager.keys_collection.count_documents(
            {"expired_date": {"$lt": datetime.now()}}
        )
        unlimited_keys = key_manager.keys_collection.count_documents(
            {"expired_date": None}
        )

        print(f"üìà T·ªïng s·ªë key: {total_keys}")
        print(f"‚úÖ Key ƒë√£ k√≠ch ho·∫°t: {activated_keys}")
        print(f"‚è≥ Key ch∆∞a k√≠ch ho·∫°t: {total_keys - activated_keys}")
        print(f"‚ùå Key h·∫øt h·∫°n: {expired_keys}")
        print(f"‚ôæÔ∏è Key kh√¥ng gi·ªõi h·∫°n: {unlimited_keys}")

        # Key ƒë∆∞·ª£c t·∫°o trong 7 ng√†y qua
        week_ago = datetime.now() - timedelta(days=7)
        recent_keys = key_manager.keys_collection.count_documents(
            {"created_date": {"$gte": week_ago}}
        )
        print(f"üÜï Key t·∫°o trong 7 ng√†y qua: {recent_keys}")

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}")


# Th√™m import c·∫ßn thi·∫øt


# Ch∆∞∆°ng tr√¨nh ch√≠nh cho admin
def run_admin_panel():
    """Ch·∫°y panel admin"""
    admin_password = "admin123"  # ƒê·ªïi password n√†y trong th·ª±c t·∫ø

    print("üîê ƒêƒÇNG NH·∫¨P ADMIN")
    password = input("Nh·∫≠p m·∫≠t kh·∫©u admin: ")

    if password != admin_password:
        print("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
        return

    admin_key_management()


# Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ ch·∫°y admin panel
run_admin_panel()
